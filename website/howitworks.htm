
<html>
<body>

<h1>Quake Lenses</h1>

<p>
<a href="index.htm">home</a> | <a href="howitworks.htm">how it works</a> | <a href="gallery.htm">gallery</a> | <a href="syntax.htm">lens syntax</a> | <a href="download.htm">download</a> | <a href="future.htm">future</a> | <a href="contact.htm">contact</a>
</p>

<p>
Quake Lenses uses the same techniques and code from <a href="http://strlen.com/gfxengine/fisheyequake/">Fisheye Quake</a>.
</p>

<h3>Standard Projection</h3>
<p>
The standard projection used by all games today is the rectilinear projection.  It is simple to implement and works very well for any field of view less than 120 degrees.  It begins degenerating as it approaches a limit of 180 degrees, resulting in the total compression of the view to the center of the image.
</p>

<h3>Environment Map</h3>
<p>
If you are familiar with online photo panoramas or Google Street View, those are created by placing a camera on a tripod, and taking six pictures for each direction: front, behind, left, right, top, down.  Combining these pictures creates a cubemap, which effectively represents an entire scene from a fixed position.  A cubemap is one of several types of so-called environment maps.  A cube is most commonly used because it is simple and accurate.
</p>
<p>
The game is able to generate a cubemap by rotating the camera in each of the six directions before rendering.  To draw the screen through a certain lens, a lookup table is used to map a pixel on the screen to a pixel on the cubemap.  
</p>

<h3>Lens</h3>
<p>
In the game, each pixel on the screen must correspond to a pixel on the cubemap.  This relationship can be determined in two defined ways: a forward mapping, or an inverse mapping.
<ul>
   <li>Forward: environment to screen coordinates</li>
   <li>Inverse: screen to environment coordinates</li>
</ul>
There are currently different coordinate systems supported by Quake Lenses that offer flexibility in how these maps are defined for a lens.


</p>

</body>
</html>
